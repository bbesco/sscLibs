/* globals use org request */
/* URL.js
* @description: A libary for working with the current URL parameters of the page
* @author: Government of Canada
*/
"use strict";
use( [ "Gumbo.js", "Template.js" ], function( Gumbo, Template )
{
    /**
     * GetAllParameters
     *  - get all the parameters for the current page request
     * @returns {Boolean|Collection} And Collection of keys and values for Hashmaps. False if empty.
     */
    function getParameters( makeSafe )
    {
        var parameters = request.getRequestParameterMap();

        if ( Gumbo.isCollectionEmpty( parameters ) )
        {
            return false;
        }

        var mappings = [],
            enteries = parameters.entrySet().iterator();

        while ( enteries.hasNext() )
        {
            var item = enteries.next(),
                name = item.getKey(),
                value = decodeURIComponent( request.getParameter( name ) );

            mappings.push( {
                "key": name,
                "value": ( makeSafe ) ? Gumbo.forJavascript( value ) : value
            } );
        }

        return mappings;
    }

    /**
     * Flattens and alters the passed parameter of a item.key / item.value list
     * @param {array} list  - the parameters that need to flattened for the modified list
     * @param {string} name  - the name of the key that is being replaced
     * @param {string} value - the value of the key that is to be inserted
     */
    function infuse( list, name, value )
    {
        var flattened = {},
            found = false;

        for ( var j = 0; j < list.length; j++ )
        {

            var item = list[ j ];

            if ( item.key == name )
            {
                flattened[ item.key ] = value;
                found = true;

                continue;
            }

            flattened[ item.key ] = item.value;
        }

        if ( !found )
        {
            flattened[ name ] = value;
        }

        return flattened;
    }

    /**
     * Check to see if parameter exists if so return it safely
     * @param {string} name  - parameter name
     */
    function has( name, value )
    {
        var parameter = request.getParameter( name );

        // Check if the parameter exists - if not then report false
        if ( Gumbo.isEmpty( parameter ) )
        {
            return false;
        }

        // Check if value is required to be tested, if not then return true
        // since we know that the parameter exists
        if ( Gumbo.isEmpty( value ) )
        {
            return true;
        }

        // Check to see if value and paramter are not the same - return false if not
        if ( value != parameter )
        {
            return false;
        }

        return true;
    }

    /**
     * Get a Request Parameter
     * @param   {[[Type]]} name [[Description]]
     * @returns {boolean}  [[Description]]
     */
    function parameter( name )
    {
        var parameter = request.getParameter( name );

        if ( Gumbo.isEmpty( parameter ) )
        {
            return false;
        }

        return Gumbo.forJavascript( decodeURIComponent( parameter ) );
    }
    
    /**
     * Get a Request Date Parameter and returns cleaned integer value of ISODate String
     * @param   {String} name [Parameter name]
     * @returns  {integer} interger - integer representation of year|month|day (useful for datesorting)
     */
    function getDateParameter( name ) 
    {
        var val = parameter( name );
        val = val.replaceAll("\\\\u002D","");
        val = Gumbo.getIntegerFromISODate( val );

        return val;
    }

    /**
     * return array of string separated on delim
     * @param   {String} name [Parameter name]
     * @returns {string[]} array - array generated by splitting string on ' ' delimiter character
     */
	function splitValuesFromParameter(name)
	{ 
		return Gumbo.split(Gumbo.trim(parameter(name)), ' '); 
	}
	
    /**
     * Siphon - filter the requesting parameter by an array of parameters
     * @param   { array } rules - parameters that are allowed to interact with the request
     * @returns { array } array of normalized parameters
     */
    function siphon( allowed, settings )
    {
        var query = {};
        var searchterms = [];
        var requested = [];
        var coalesce = [];

        /* Parse Allowed Parameters
        ------------------------------------- */
        for ( var j = 0; j < allowed.length; j++ )
        {
            // Ignore stripped items / and 'request' keyword since it is reserved
            if ( allowed[ j ].strip )
            {
                continue;
            }

            // Get aliased parameter correct key for the API
            var item = allowed[ j ];
            var key = ( item.alias ) ? Gumbo.trim( item.alias ) : Gumbo.trim( item.key );

            // Bake item value if not false
            if ( item.value )
            {
                // Lets see if the item is query to component properties
                if ( Gumbo.startsWith( item.value, "#" ) )
                {
                    item.value = Template.getProperty( settings, Gumbo.stringAfter( item.value, "#" )  );
                }

                query[ item.key ] = Gumbo.filterHTML( item.value );

                if ( item.pollen )
                {
                    item.value = Gumbo.pollinate( item.value, item.pollen.treatment, item.pollen.value );
                }

                requested.push( {
                    key: key,
                    value: item.value
                } );

                continue;
            }

            // Get parameter from query string
            var parameter = Gumbo.trim( request.getParameter( item.key ) );

            // Only process if there is a parameter
            if ( !Gumbo.isEmpty( parameter ) )
            {
                // Lets add this to the query property
                query[ item.key ] = Gumbo.filterHTML( parameter );

                if ( item.pollen )
                {
                    parameter = Gumbo.pollinate( parameter, item.pollen.treatment, item.pollen.value );
                }

                // Lets treat search terms correctly with quotes
                if ( item.type == "searchterm" )
                {
                    searchterms.push( parameter );
                }

                if ( item.coalesce )
                {
                    coalesce.push( item );
                    continue;
                }

                requested.push( {
                    key: key,
                    value: parameter
                } );
            }
        }

        // Lets see if we have filtered items
        // ** @NOTE: Filtered items are post query processing that include the searchterms as a whole
        if ( coalesce.length > 0 && searchterms.length > 0 )
        {
            for ( var f = 0; f < coalesce.length; f++ )
            {
                item = coalesce[ f ];
                key = ( item.alias ) ? Gumbo.trim( item.alias ) : Gumbo.trim( item.key );
                parameter = org.apache.commons.lang3.StringUtils.join( searchterms, " " );

                if ( typeof item.coalesce != "boolean" )
                {
                    parameter = Gumbo.pollinate( parameter, item.coalesce.treatment, item.coalesce.value );
                }

                if ( item.prefix )
                {
                    parameter = request.getParameter( item.key ) + parameter;
                }

                requested.push( {
                    key: key,
                    value: parameter
                } );
            }
        }

        return {
            query: query,
            requested: requested,
            searchterms: searchterms
        };
    }

    /**
     * Build an HTTP URL
     * @param {string} baseUrl - the absolute base path
     * @param {collection} parameters - the parameters to build the query with
     * @param {string} method  - action for the URL (defaults to GET)
     */
    function build( baseUrl, parameters, method )
    {
        return ( method != "post" ) ?
                    _get( baseUrl, parameters )
                    : _post( baseUrl, parameters );
    }

    /**
     * GET Method of creating a URL from parameters
     * @private
     * @param {string} baseUrl - the absolute base path
     * @param {collection} parameters - the parameters to build the query with
     */
    function _get( baseUrl, parameters )
    {

        var query = "?";

        for ( var j = 0; j < parameters.length; j++ )
        {

            if ( parameters[ j ].key )
            {
                var item = parameters[ j ];

                if ( j > 0 )
                {
                    query = query + "&";
                }

                query = query + item.key + "=" + encodeURIComponent( item.value );
            }
        }

        return baseUrl + query;
    }

    /**
     * POST Method of creating a URL from parameters
     * @private
     * @param {string} baseUrl - the absolute base path
     * @param {collection} parameters - the parameters to build the query with
     */
    function _post( baseUrl, parameters )
    {
        return _get( baseUrl, parameters );
    }

    return {
        parameters: getParameters,
        splitValuesFromParameter:splitValuesFromParameter,
        getDateParameter:getDateParameter,
        infuse: infuse,
        has: has,
        parameter: parameter,
        build: build,
        siphon: siphon
    };
} );
